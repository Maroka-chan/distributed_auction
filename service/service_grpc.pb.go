// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package MutexV2service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicationServiceClient is the client API for CommunicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationServiceClient interface {
	RequestBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Acknowledgement, error)
	RequestState(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*Outcome, error)
}

type communicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationServiceClient(cc grpc.ClientConnInterface) CommunicationServiceClient {
	return &communicationServiceClient{cc}
}

func (c *communicationServiceClient) RequestBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Acknowledgement, error) {
	out := new(Acknowledgement)
	err := c.cc.Invoke(ctx, "/MutexV2service.CommunicationService/RequestBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationServiceClient) RequestState(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/MutexV2service.CommunicationService/RequestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationServiceServer is the server API for CommunicationService service.
// All implementations must embed UnimplementedCommunicationServiceServer
// for forward compatibility
type CommunicationServiceServer interface {
	RequestBid(context.Context, *Bid) (*Acknowledgement, error)
	RequestState(context.Context, *Timestamp) (*Outcome, error)
	mustEmbedUnimplementedCommunicationServiceServer()
}

// UnimplementedCommunicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationServiceServer struct {
}

func (UnimplementedCommunicationServiceServer) RequestBid(context.Context, *Bid) (*Acknowledgement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBid not implemented")
}
func (UnimplementedCommunicationServiceServer) RequestState(context.Context, *Timestamp) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestState not implemented")
}
func (UnimplementedCommunicationServiceServer) mustEmbedUnimplementedCommunicationServiceServer() {}

// UnsafeCommunicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationServiceServer will
// result in compilation errors.
type UnsafeCommunicationServiceServer interface {
	mustEmbedUnimplementedCommunicationServiceServer()
}

func RegisterCommunicationServiceServer(s grpc.ServiceRegistrar, srv CommunicationServiceServer) {
	s.RegisterService(&CommunicationService_ServiceDesc, srv)
}

func _CommunicationService_RequestBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServiceServer).RequestBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MutexV2service.CommunicationService/RequestBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServiceServer).RequestBid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationService_RequestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationServiceServer).RequestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MutexV2service.CommunicationService/RequestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationServiceServer).RequestState(ctx, req.(*Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunicationService_ServiceDesc is the grpc.ServiceDesc for CommunicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MutexV2service.CommunicationService",
	HandlerType: (*CommunicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestBid",
			Handler:    _CommunicationService_RequestBid_Handler,
		},
		{
			MethodName: "RequestState",
			Handler:    _CommunicationService_RequestState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
